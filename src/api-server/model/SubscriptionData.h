/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.0.alpha-1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SubscriptionData.h
 *
 * 
 */

#ifndef SubscriptionData_H_
#define SubscriptionData_H_


//#include "OneOfNfInstanceIdCondNfTypeCondServiceNameCondAmfCondGuamiListCondNetworkSliceCondNfGroupCond.h"
#include <string>
#include "NotificationEventType.h"
#include "PlmnId.h"
#include "Snssai.h"
#include <vector>
#include "NotifCondition.h"
#include <nlohmann/json.hpp>

#include "NfInstanceIdCond.h"
#include "NfTypeCond.h"
#include "ServiceNameCond.h"
#include "AmfCond.h"
#include "GuamiListCond.h"
#include "NetworkSliceCond.h"
#include "NfGroupCond.h"

namespace oai {
namespace nrf {
namespace model {

typedef struct subscription_condition_s {
  uint8_t type;
  union {
    NfInstanceIdCond nfInstanceIdCond;
    NfTypeCond nfTypeCond;
    ServiceNameCond serviceNameCond;
    AmfCond amfCond;
    GuamiListCond guamiListCond;
    NetworkSliceCond networkSliceCond;
    NfGroupCond nfGroupCond;
  };

  subscription_condition_s()
      : type(0) {
  }

  subscription_condition_s(uint8_t t)
      : type(t) {
  }

  bool operator==(const struct subscription_condition_s &s) const {
    return (s.type == type);
  }
  //------------------------------------------------------------------------------
  bool operator==(const uint8_t &t) const {
    return (t == type);
  }


  virtual ~subscription_condition_s() {};

} subscription_condition_t;

/// <summary>
/// 
/// </summary>
class  SubscriptionData
{
public:
    SubscriptionData();
    virtual ~SubscriptionData();

    void validate();

    /////////////////////////////////////////////
    /// SubscriptionData members

    /// <summary>
    /// 
    /// </summary>
    std::string getNfStatusNotificationUri() const;
    void setNfStatusNotificationUri(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getReqNfInstanceId() const;
    void setReqNfInstanceId(std::string const& value);
    bool reqNfInstanceIdIsSet() const;
    void unsetReqNfInstanceId();
    /// <summary>
    /// 
    /// </summary>

    //OneOfNfInstanceIdCondNfTypeCondServiceNameCondAmfCondGuamiListCondNetworkSliceCondNfGroupCond getSubscrCond() const;
    subscription_condition_t getSubscrCond() const;

    void setSubscrCond(subscription_condition_t const& value);
    bool subscrCondIsSet() const;
    void unsetSubscrCond();
    /// <summary>
    /// 
    /// </summary>
    std::string getSubscriptionId() const;
    void setSubscriptionId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getValidityTime() const;
    void setValidityTime(std::string const& value);
    bool validityTimeIsSet() const;
    void unsetValidityTime();
    /// <summary>
    /// 
    /// </summary>
    std::vector<NotificationEventType>& getReqNotifEvents();
    void setReqNotifEvents(std::vector<NotificationEventType> const& value);
    bool reqNotifEventsIsSet() const;
    void unsetReqNotifEvents();
    /// <summary>
    /// 
    /// </summary>
    PlmnId getPlmnId() const;
    void setPlmnId(PlmnId const& value);
    bool plmnIdIsSet() const;
    void unsetPlmnId();
    /// <summary>
    /// 
    /// </summary>
    NotifCondition getNotifCondition() const;
    void setNotifCondition(NotifCondition const& value);
    bool notifConditionIsSet() const;
    void unsetNotifCondition();
    /// <summary>
    /// 
    /// </summary>
    std::string getReqNfType() const;
    void setReqNfType(std::string const& value);
    bool reqNfTypeIsSet() const;
    void unsetReqNfType();
    /// <summary>
    /// 
    /// </summary>
    std::string getReqNfFqdn() const;
    void setReqNfFqdn(std::string const& value);
    bool reqNfFqdnIsSet() const;
    void unsetReqNfFqdn();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Snssai>& getReqSnssais();
    void setReqSnssais(std::vector<Snssai> const& value);
    bool reqSnssaisIsSet() const;
    void unsetReqSnssais();

    friend void to_json(nlohmann::json& j, const SubscriptionData& o);
    friend void from_json(const nlohmann::json& j, SubscriptionData& o);
protected:
    std::string m_NfStatusNotificationUri;

    std::string m_ReqNfInstanceId;
    bool m_ReqNfInstanceIdIsSet;
    //OneOfNfInstanceIdCondNfTypeCondServiceNameCondAmfCondGuamiListCondNetworkSliceCondNfGroupCond m_SubscrCond;
    subscription_condition_t m_SubscrCond;
    bool m_SubscrCondIsSet;
    std::string m_SubscriptionId;

    std::string m_ValidityTime;
    bool m_ValidityTimeIsSet;
    std::vector<NotificationEventType> m_ReqNotifEvents;
    bool m_ReqNotifEventsIsSet;
    PlmnId m_PlmnId;
    bool m_PlmnIdIsSet;
    NotifCondition m_NotifCondition;
    bool m_NotifConditionIsSet;
    std::string m_ReqNfType;
    bool m_ReqNfTypeIsSet;
    std::string m_ReqNfFqdn;
    bool m_ReqNfFqdnIsSet;
    std::vector<Snssai> m_ReqSnssais;
    bool m_ReqSnssaisIsSet;
};

}
}
}

#endif /* SubscriptionData_H_ */
